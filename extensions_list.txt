
この要件を満たすためには、プログラムと`systemd`の両方で対応が必要です。以下にそのステップを説明します。

### Javaプログラム側
1. **シャットダウンフックの追加**: JavaのRuntimeクラスを用いてシャットダウンフックを設定します。これはJVMが終了する前に呼び出されるスレッドです。

    ```java
    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
        // 終了処理をここに書く
    }));
    ```

    このフック内で、プログラムが次のデータ取得を行わないようにフラグをセットするなどしてください。

2. **終了判定**: プログラム内のメインループで終了フラグを定期的に確認するようにします。

    ```java
    boolean running = true;

    while (running) {
        // データベースからデータを取得し、処理する

        // 終了フラグを確認
        if (shouldStop()) {
            running = false;
        }
    }
    ```

### systemd側
1. **ユニットファイルの設定**: `ExecStop`は必要ですが、Javaプログラムがシャットダウンフックをしっかりと処理するようになっていれば、通常の`SIGTERM`で問題ありません。以下のように設定することができます。

    ```ini
    [Unit]
    Description=My Java Application

    [Service]
    ExecStart=/usr/bin/java -jar /path/to/your/application.jar
    ExecStop=/bin/kill $MAINPID
    Type=simple

    [Install]
    WantedBy=multi-user.target
    ```

これで`systemctl stop`コマンドを実行したとき、`SIGTERM`シグナルがJavaプロセスに送られ、Javaのシャットダウンフックが実行されます。このフック内で適切な終了処理を行い、メインループが終了すれば、プログラムが次のデータ取得を行わずに終了します。
