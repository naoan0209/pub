# =========================================================================
#    ** FT対応マルチステージビルド **
#
#    ビルド時にターゲットを指定。ステージの依存関係に従いビルドする。
#    `docker build --target (ft|svc) -t tomcat . -f Dockerfile_multistage`
#
#    1. ビルドフェーズ
#      [ソース] ------------> [FT用ソース] -------> [ビルド（FT）]
#                    └--------------------------> [ビルド（SVC）]
#
#    2. 実行フェーズ
#      [ベース] ------> [実行（FT）] -- COPY FROM -> [ビルド（FT）]
#               └----> [実行（SVC）] - COPY FROM -> [ビルド（SVC）]
# =========================================================================

# -------------------------------------------------------------------------
# ソースステージ
# -------------------------------------------------------------------------
# Ubuntuベース
FROM public.ecr.aws/docker/library/maven:3.9.6-eclipse-temurin-21-jammy AS source

WORKDIR /app

# ソースコードをコピー
COPY ./app/src/ /app/src/

# ビルド定義ファイルをコピー
COPY ./app/pom.xml /app/pom.xml

# -------------------------------------------------------------------------
# FT用
# -------------------------------------------------------------------------
FROM source AS source_ft

# mavenビルド前にFT用ファイルを差し替える
COPY ./ft/index.jsp /app/src/main/webapp/index.jsp
COPY ./ft/web.xml /app/src/main/webapp/WEB-INF/web.xml

# -------------------------------------------------------------------------
# ビルドステージ（ft）
# -------------------------------------------------------------------------
FROM source_ft AS build_ft

# ビルド
RUN mvn package

# -------------------------------------------------------------------------
# ビルドステージ（svc）
# -------------------------------------------------------------------------
FROM source AS build_svc

# ビルド
RUN mvn package

# -------------------------------------------------------------------------
# ベースステージ
# -------------------------------------------------------------------------
FROM public.ecr.aws/docker/library/tomcat:10.1.20-jre21-temurin-jammy AS base

# パッケージをアップデート、追加パッケージをインストール
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install --no-install-recommends -y language-pack-ja-base && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# タイムゾーンを変更
ENV TZ=Asia/Tokyo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone

# ロケールを変更
ENV LANG=ja_JP.UTF-8
ENV LANGUAGE=
ENV LC_ALL=

# アプリケーション実行ユーザを変更
ARG USER=appuser
ARG GROUP=appgroup
ARG UID=1000
ARG GID=1000

RUN groupadd -g ${GID} ${GROUP} && \
    useradd -u ${UID} -g ${GROUP} -d "${CATALINA_HOME}" -s /sbin/nologin -l ${USER} && \
    chown -R ${USER}:${GROUP} "${CATALINA_HOME}"

USER ${USER}

# war以外のアプリケーション関連ファイルをコピー
COPY --chown=${USER}:${GROUP} ./app/conf/ "${CATALINA_HOME}"/conf/
COPY --chown=${USER}:${GROUP} ./app/webapps/ROOT/ "${CATALINA_HOME}"/webapps/ROOT/

# -------------------------------------------------------------------------
# 実行ステージ（ft）
# -------------------------------------------------------------------------
FROM base AS ft

# ft用ビルドステージで生成したwarファイルをコピー
COPY --chown=${USER}:${GROUP} --from=build_ft /app/target/*.war "${CATALINA_HOME}"/webapps/

# -------------------------------------------------------------------------
# 実行ステージ（svc）
# -------------------------------------------------------------------------
FROM base AS svc

# svc用ビルドステージで生成したwarファイルをコピー
COPY --chown=${USER}:${GROUP} --from=build_svc /app/target/*.war "${CATALINA_HOME}"/webapps/
